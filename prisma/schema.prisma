generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  name       String
  avatar     String?
  role       UserRole    @default(AUTHOR)
  status     UserStatus  @default(ACTIVE)
  password   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  lastLogin  DateTime?
  blogPosts  BlogPost[]
  mediaFiles MediaFile[]
  podcasts   Podcast[]

  @@map("users")
}

model BlogPost {
  id             String     @id @default(cuid())
  title          String
  slug           String     @unique
  excerpt        String?
  content        String
  status         PostStatus @default(DRAFT)
  featuredImage  String?
  publishedAt    DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  seoTitle       String?
  seoDescription String?
  seoKeywords    String?
  views          Int        @default(0)
  readTime       Int?
  authorId       String
  author         User       @relation(fields: [authorId], references: [id])
  tags           Tag[]      @relation("BlogPostToTag")

  @@map("blog_posts")
}

model Podcast {
  id             String        @id @default(cuid())
  title          String
  description    String
  status         PodcastStatus @default(DRAFT)
  audioUrl       String?
  duration       String?
  fileSize       String?
  publishedAt    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  downloads      Int           @default(0)
  authorId       String
  content        String?
  episodeNumber  String?
  seasonNumber   String?
  seoDescription String?
  seoKeywords    String?
  seoTitle       String?
  tags           String?
  author         User          @relation(fields: [authorId], references: [id])

  @@map("podcasts")
}

model MediaFile {
  id           String    @id @default(cuid())
  name         String
  originalName String
  type         MediaType
  url          String
  size         String
  mimeType     String
  alt          String?
  dimensions   String?
  duration     String?
  uploadedAt   DateTime  @default(now())
  uploaderId   String
  uploader     User      @relation(fields: [uploaderId], references: [id])

  @@map("media_files")
}

model DashboardItem {
  id        String          @id @default(cuid())
  header    String
  type      String
  status    DashboardStatus
  target    String
  limit     String
  reviewer  String
  order     Int             @default(0)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("dashboard_items")
}

model SiteSetting {
  id    String      @id @default(cuid())
  key   String      @unique
  value String
  type  SettingType @default(TEXT)

  @@map("site_settings")
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  color     String?
  createdAt DateTime   @default(now())
  blogPosts BlogPost[] @relation("BlogPostToTag")

  @@map("tags")
}

model about {
  id        String   @id
  mission   String
  vision    String
  about     String
  imageUrl  String?
  team      Json
  siteId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model HomePage {
  id        String   @id @default(cuid())
  site      String   @unique // "appfirmsec" or "ennieboateng"
  
  // Hero section - matches frontend
  heroTitle       String?
  heroSubtitle    String?
  heroDescription String?
  
  // Insights and Podcasts - stored as JSON arrays
  insights        Json? // Array of insight objects
  podcasts        Json? // Array of podcast objects
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("home_pages")
}

enum UserRole {
  ADMIN
  EDITOR
  AUTHOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum PodcastStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum MediaType {
  IMAGE
  AUDIO
  VIDEO
  DOCUMENT
}

enum DashboardStatus {
  IN_PROCESS
  DONE
  PENDING
}

enum SettingType {
  TEXT
  TEXTAREA
  NUMBER
  BOOLEAN
  JSON
}
